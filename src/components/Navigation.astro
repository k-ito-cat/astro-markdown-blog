---
import { HEADING_LEVEL } from "~/constants/headingLevel";

type Props = {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
};

const { headings } = Astro.props;
---

{
  headings.length > 0 && (
    <>
      <div class="relative lg:order-2">
        <nav
          id="navigation"
          class="scrollbar-hide bg-tag fixed top-0 right-0 z-40 h-full w-80 translate-x-full overflow-y-scroll p-6 pt-12 transition-transform duration-300 ease-in-out lg:sticky lg:top-4 lg:order-1 lg:h-max lg:w-auto lg:translate-x-0 lg:overflow-y-auto lg:bg-transparent lg:px-0 lg:py-5"
        >
          <div
            id="navigation-content"
            class="transform transition-all duration-200 ease-in-out lg:max-h-none"
          >
            <ul class="m-0 flex list-none flex-col p-0">
              {headings.map((heading) => (
                <li class="relative">
                  <a
                    href={`#${heading.slug}`}
                    class:list={{
                      "text-primary/80 hover:bg-note/10 hover:text-primary border-meta hover:border-note navigation-link relative block w-full overflow-visible border-l px-4 py-2 text-sm leading-relaxed no-underline transition-all duration-200 ease-in-out": true,
                      "text-[15px] font-semibold":
                        heading.depth === HEADING_LEVEL.TWO,
                      "pl-8": heading.depth === HEADING_LEVEL.THREE,
                    }}
                  >
                    {heading.text}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </nav>
      </div>
    </>
  )
}

<!-- <script>
  document.addEventListener("DOMContentLoaded", () => {
    const hamburgerButton = document.querySelector("#hamburger-button");
    const navigation = document.querySelector("#navigation");
    const overlay = document.querySelector("#mobile-overlay");
    const hamburgerIcon = document.querySelector("#hamburger-icon");
    const closeIcon = document.querySelector("#close-icon");
    const navigationLinks = document.querySelectorAll(".navigation-link");

    if (!navigation) return;

    let isMenuOpen = false;

    const toggleMenu = () => {
      isMenuOpen = !isMenuOpen;

      if (isMenuOpen) {
        // メニューを開く
        navigation.classList.remove("translate-x-full");
        overlay?.classList.remove("opacity-0", "pointer-events-none");
        hamburgerIcon?.classList.add("hidden");
        closeIcon?.classList.remove("hidden");
        document.body.style.overflow = "hidden";
      } else {
        // メニューを閉じる
        navigation.classList.add("translate-x-full");
        overlay?.classList.add("opacity-0", "pointer-events-none");
        hamburgerIcon?.classList.remove("hidden");
        closeIcon?.classList.add("hidden");
        document.body.style.overflow = "";
      }
    };

    if (hamburgerButton) {
      hamburgerButton.addEventListener("click", toggleMenu);
      overlay?.addEventListener("click", () => {
        if (isMenuOpen) toggleMenu();
      });
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && isMenuOpen) toggleMenu();
      });
    }
    navigationLinks.forEach((link) => {
      link.addEventListener("click", () => {
        if (isMenuOpen) toggleMenu();
      });
    });

    /**
     * ハッシュが変わったら、ナビゲーションのリンクをハイライトする
     */
    const setActiveByHash = () => {
      const hash = decodeURIComponent(location.hash || "");
      navigationLinks.forEach((link) =>
        link.classList.remove(
          "border-note",
          "bg-note/10",
          "text-primary",
          "inline-block",
        ),
      );
      if (!hash) return;
      const target = Array.from(navigationLinks).find(
        (LinkItem) => LinkItem.getAttribute("href") === hash,
      );
      if (target) {
        target.classList.add(
          "border-note",
          "bg-note/10",
          "text-primary",
          "inline-block",
        );
      }
    };
    window.addEventListener("hashchange", setActiveByHash);
    setActiveByHash();

    /**
     * viewport内に見出しが入ったら配列に見出しのidを追加し、配列の最後の要素（最後に読み込まれた見出し）をハッシュに設定する
     */
    const setActiveByVisible = () => {
      // 現在ビューポート内の見出しだけを追跡
      const visibleHeadings = new Set();
      const io = new IntersectionObserver(
        (entries) => {
          for (const entry of entries) {
            if (entry.isIntersecting && entry.target.tagName === "H2") {
              visibleHeadings.add(entry.target);
            } else {
              visibleHeadings.delete(entry.target);
            }
          }

          const nowVisible = Array.from(visibleHeadings).map((headingEl) => {
            if (!(headingEl instanceof HTMLElement)) return "";
            return (
              headingEl.id ||
              (headingEl.textContent ? headingEl.textContent.trim() : "")
            );
          });
          const last = nowVisible[nowVisible.length - 1];
          if (last && `#${last}` !== location.hash) {
            location.hash = last.startsWith("#") ? last : `#${last}`;
          }
        },
        {
          root: null,
          threshold: 0.2,
        },
      );

      document.querySelectorAll("h2").forEach((el) => io.observe(el));
    };
    setActiveByVisible();
  });
</script> -->

<style is:inline>
  .scrollbar-hide {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-width-0 {
    scrollbar-width: 0;
  }
  .scrollbar-color-transparent-gray-100 {
    scrollbar-color: transparent transparent;
  }
</style>
