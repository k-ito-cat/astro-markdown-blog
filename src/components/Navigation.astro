---
import { Icon } from "astro-icon/components";
import { HEADING_LEVEL } from "~/constants/headingLevel";

type Props = {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
};

const { headings } = Astro.props;
---

{
  headings.length > 0 && (
    <>
      <button
        id="hamburger-button"
        type="button"
        class="fixed top-4 right-4 z-50 flex h-6 w-6 items-center justify-center transition-all duration-200 ease-in-out lg:hidden"
        aria-label="ナビゲーションを開く"
      >
        <Icon
          name="mdi:menu"
          class="text-primary h-6 w-6"
          id="hamburger-icon"
        />
        <Icon
          name="mdi:close"
          class="text-primary hidden h-6 w-6"
          id="close-icon"
        />
      </button>

      <div class="relative lg:order-2">
        <nav
          id="navigation"
          class="scrollbar-hide bg-tag fixed top-0 right-0 z-40 h-full w-80 translate-x-full overflow-hidden overflow-y-scroll p-6 pt-12 transition-transform duration-300 ease-in-out lg:sticky lg:top-4 lg:order-1 lg:h-max lg:w-auto lg:translate-x-0 lg:overflow-y-auto lg:bg-transparent lg:px-0 lg:py-5"
        >
          <div
            id="navigation-content"
            class="transform transition-all duration-200 ease-in-out lg:max-h-none"
          >
            <ul class="m-0 flex list-none flex-col gap-2 p-0">
              {headings.map((heading) => (
                <li
                  class:list={{
                    relative: true,
                    "ml-4": heading.depth === HEADING_LEVEL.THREE,
                  }}
                >
                  <a
                    href={`#${heading.slug}`}
                    class:list={{
                      "text-note-text hover:bg-note/10 hover:border-note navigation-link block border-b border-transparent px-3 py-2 text-sm leading-relaxed no-underline transition-all duration-200 ease-in-out": true,
                      "hover:bg-note/15 text-[15px] font-semibold":
                        heading.depth === HEADING_LEVEL.TWO,
                    }}
                  >
                    {heading.text}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </nav>
      </div>
    </>
  )
}

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const hamburgerButton = document.querySelector("#hamburger-button");
    const navigation = document.querySelector("#navigation");
    const overlay = document.querySelector("#mobile-overlay");
    const hamburgerIcon = document.querySelector("#hamburger-icon");
    const closeIcon = document.querySelector("#close-icon");
    const navigationLinks = document.querySelectorAll(".navigation-link");

    let isMenuOpen = false;

    const toggleMenu = () => {
      isMenuOpen = !isMenuOpen;

      if (isMenuOpen) {
        // メニューを開く
        navigation.classList.remove("translate-x-full");
        overlay.classList.remove("opacity-0", "pointer-events-none");
        hamburgerIcon.classList.add("hidden");
        closeIcon.classList.remove("hidden");
        document.body.style.overflow = "hidden";
      } else {
        // メニューを閉じる
        navigation.classList.add("translate-x-full");
        overlay.classList.add("opacity-0", "pointer-events-none");
        hamburgerIcon.classList.remove("hidden");
        closeIcon.classList.add("hidden");
        document.body.style.overflow = "";
      }
    };

    hamburgerButton?.addEventListener("click", toggleMenu);

    overlay?.addEventListener("click", () => {
      if (isMenuOpen) toggleMenu();
    });

    navigationLinks.forEach((link) => {
      link.addEventListener("click", () => {
        if (isMenuOpen) toggleMenu();
      });
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && isMenuOpen) {
        toggleMenu();
      }
    });

    const setActiveByHash = () => {
      const hash = decodeURIComponent(location.hash || "");
      navigationLinks.forEach((link) => link.classList.remove("bg-note/15"));
      if (!hash) return;
      const target = Array.from(navigationLinks).find(
        (LinkItem) => LinkItem.getAttribute("href") === hash,
      );
      if (target) {
        target.classList.add("bg-note/15");
      }
    };
    window.addEventListener("hashchange", setActiveByHash);
    setActiveByHash();
  });
</script>

<style is:inline>
  .scrollbar-hide {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-width-0 {
    scrollbar-width: 0;
  }
  .scrollbar-color-transparent-gray-100 {
    scrollbar-color: transparent transparent;
  }
</style>
