---
import { getCollection, getEntry } from "astro:content";
import BaseLayout from "~/layouts/BaseLayout.astro";
import Article from "~/components/Article.astro";
import Navigation from "~/components/Navigation.astro";
import { PUBLISHED_STATUS } from "~/constants/publishedStatus";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  /**
   * 公開または下書きのpostだけを取得
   */
  const posts = await getCollection("posts", ({ data }) => {
    return data.status !== PUBLISHED_STATUS.PRIVATE;
  });
  return posts.map((post) => {
    return {
      params: { slug: post.slug },
    };
  });
}

const { slug } = Astro.params;
const post = await getEntry("posts", slug);

if (!post) return Astro.redirect("/404");

const rendered = await post.render();
const { Content, headings } = rendered;
---

<BaseLayout title={`記事｜${post.data.title}`}>
  <main class="mx-auto max-w-[1440px] bg-transparent px-4 py-8">
    <a
      class="mb-2 flex w-max items-center duration-200 hover:opacity-70"
      href="/"
    >
      <Icon name="stash--chevron-left-light" width={24} height={24} />
      <span class="text-small">戻る</span>
    </a>
    {
      post.data.status.includes(PUBLISHED_STATUS.DRAFT) ? (
        <Article
          title={post.data.title}
          publishedAt={post.data.publishedAt}
          categories={post.data.categories}
          thumbnail={post.data.thumbnail}
          githubUrl={post.data.githubUrl}
          content={Content}
          headings={headings}
          status={post.data.status}
        />
      ) : (
        <div
          class:list={[
            {
              "grid gap-4 lg:grid-cols-[minmax(0,auto)_30%]":
                headings.length > 0,
            },
          ]}
        >
          <Navigation headings={headings} />
          <Article
            title={post.data.title}
            publishedAt={post.data.publishedAt}
            categories={post.data.categories}
            thumbnail={post.data.thumbnail}
            githubUrl={post.data.githubUrl}
            content={Content}
            headings={headings}
            status={post.data.status}
          />
        </div>
      )
    }
  </main>
  <button
    id="scroll-to-top-btn"
    type="button"
    class="border-primary fixed right-4 bottom-4 z-10 h-12 w-12 translate-y-[150%] items-center justify-center rounded-full border text-white duration-300 hover:opacity-70"
  >
    <Icon
      class="rotate-90"
      name="stash--chevron-left-light"
      width={45}
      height={45}
    />
  </button>
</BaseLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const btn = document.getElementById("scroll-to-top-btn");

    /**
     * document body の最下部付近に到達したら、
     * フローティングボタンを表示する
     */
    window.addEventListener("scroll", () => {
      const bottom = window.scrollY + window.innerHeight;
      const pageHeight = document.body.scrollHeight;

      if (!btn) return;

      if (bottom >= pageHeight - 500) {
        btn.classList.remove("translate-y-[150%]");
      } else {
        btn.classList.add("translate-y-[150%]");
      }
    });

    /**
     * フローティングボタンをクリックしたら、
     * ページの最上部にスクロールする
     */
    if (!btn) return;
    btn.addEventListener("click", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
    });
  });
</script>
