---
import { getCollection, getEntry } from "astro:content";
import BaseLayout from "~/layouts/BaseLayout.astro";
import Article from "~/components/Article.astro";
import Navigation from "~/components/Navigation.astro";
import Overlay from "~/components/Overlay.astro";
import { PUBLISHED_STATUS } from "~/constants/publishedStatus";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  /**
   * 公開または下書きのpostだけを取得
   */
  const posts = await getCollection("posts", ({ data }) => {
    return data.status !== PUBLISHED_STATUS.PRIVATE;
  });
  return posts.map((post) => {
    return {
      /**
       * getCollectionのslugは基本ファイル名だが、フロントマターに"slug"プロパティがあればオーバーライドが可能
       * @see https://docs.astro.build/en/guides/content-collections/#defining-custom-ids
       */
      params: { slug: post.slug },
    };
  });
}

const { slug } = Astro.params;
const post = await getEntry("posts", slug);

if (!post) return Astro.redirect("/404");

const rendered = await post.render();
const { Content, headings } = rendered;
---

<BaseLayout title={`記事｜${post.data.title}`}>
  <main
    class="mx-auto max-w-[var(--max-width-pc)] bg-transparent px-2 py-8 lg:px-4"
  >
    <header
      class="fixed top-0 left-0 z-[999] h-12 w-full transition-transform duration-200 ease-in-out lg:h-16"
    >
      <a
        class="bg-card/80 border-primary/80 absolute top-1/2 left-4 flex w-max -translate-y-1/2 items-center rounded-full border p-1 duration-200 hover:opacity-70 lg:p-2"
        href="/"
      >
        <Icon name="octicon:chevron-left-16" width={18} height={18} />
      </a>

      <button
        id="hamburger-button"
        type="button"
        class="absolute top-1/2 right-4 flex h-6 w-6 -translate-y-1/2 items-center justify-center transition-all duration-200 ease-in-out lg:hidden"
        aria-label="ナビゲーションを開く"
      >
        <Icon
          name="mdi:menu"
          class="text-primary h-6 w-6"
          id="hamburger-icon"
        />
        <Icon
          name="mdi:close"
          class="text-primary hidden h-6 w-6"
          id="close-icon"
        />
      </button>
    </header>
    {
      post.data.status.includes(PUBLISHED_STATUS.DRAFT) ? (
        <Article
          title={post.data.title}
          publishedAt={post.data.publishedAt}
          categories={post.data.categories}
          thumbnail={post.data.thumbnail}
          githubUrl={post.data.githubUrl}
          content={Content}
          headings={headings}
          status={post.data.status}
        />
      ) : (
        <div
          class:list={[
            {
              "grid gap-4 lg:grid-cols-[minmax(0,auto)_30%]":
                headings.length > 0,
            },
          ]}
        >
          <Navigation headings={headings} />
          <Article
            title={post.data.title}
            publishedAt={post.data.publishedAt}
            categories={post.data.categories}
            thumbnail={post.data.thumbnail}
            githubUrl={post.data.githubUrl}
            content={Content}
            headings={headings}
            status={post.data.status}
          />
        </div>
      )
    }
  </main>
  <Overlay id="mobile-overlay" />
  <button
    id="scroll-to-top-btn"
    type="button"
    class="border-primary fixed right-4 bottom-4 z-10 h-12 w-12 translate-y-[150%] items-center justify-center rounded-full border text-white duration-300 hover:opacity-70"
  >
    <Icon
      class="rotate-90"
      name="stash--chevron-left-light"
      width={45}
      height={45}
    />
  </button>
</BaseLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const btn = document.getElementById("scroll-to-top-btn");

    /**
     * document body の最下部付近に到達したら、
     * フローティングボタンを表示する
     */
    window.addEventListener("scroll", () => {
      const bottom = window.scrollY + window.innerHeight;
      const pageHeight = document.body.scrollHeight;

      if (!btn) return;

      if (bottom >= pageHeight - 500) {
        btn.classList.remove("translate-y-[150%]");
      } else {
        btn.classList.add("translate-y-[150%]");
      }
    });

    /**
     * フローティングボタンをクリックしたら、
     * ページの最上部にスクロールする
     */
    if (!btn) return;
    btn.addEventListener("click", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
    });

    /**
     * 下スクロールがある程度発生したらヘッダーを画面外へ、
     * 上スクロールがある程度発生したらヘッダーを画面内へ戻す
     */
    const HEADER_HIDE_THRESHOLD = 4;
    const header = document.querySelector("header");
    if (!header) return;
    let lastY = window.scrollY;
    let acc = 0;
    let hidden = false;
    let lastDir = 0; // 1: down, -1: up, 0: none

    window.addEventListener(
      "scroll",
      () => {
        const y = window.scrollY;
        const delta = y - lastY;
        const dir = Math.sign(delta);

        // ページ最上部付近では必ず表示
        if (y < 10) {
          header.classList.remove("translate-y-[-100%]");
          header.classList.add("translate-y-[0]");
          hidden = false;
          acc = 0;
          lastDir = 0;
          lastY = y;
          return;
        }

        if (dir !== 0 && dir !== lastDir) acc = 0;
        acc += delta;

        if (acc >= HEADER_HIDE_THRESHOLD && !hidden) {
          header.classList.add("translate-y-[-100%]");
          header.classList.remove("translate-y-[0]");
          hidden = true;
          acc = 0;
        }

        if (acc <= -HEADER_HIDE_THRESHOLD && hidden) {
          header.classList.remove("translate-y-[-100%]");
          header.classList.add("translate-y-[0]");
          hidden = false;
          acc = 0;
        }

        lastDir = dir;
        lastY = y;
      },
      { passive: true },
    );
  });
</script>
